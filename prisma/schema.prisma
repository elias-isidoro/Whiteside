// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// ----------------------- Database

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// ----------------------- Auth

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Role {
  id   String @id @default(cuid())
  name String
  User User[]

  canManageOrders          Boolean @default(false)
  canManageProducts        Boolean @default(false)
  canManageCategories      Boolean @default(false)
  canViewSalesAndAnalytics Boolean @default(false)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  username      String?   @unique

  image    String?

  Role     Role?      @relation(fields: [roleId], references: [id])
  roleId   String?

  accounts Account[]
  sessions Session[]
  Orders   Orders[]
  Product  Product[]
  Category Category[]

  @@index([roleId])
}

// ----------------------- Inventory

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  @@index([authorId])
}

model Product {
  id          String    @id @default(cuid())
  name        String    @unique
  description String
  variants    Variant[]

  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  @@index([categoryId])
  @@index([authorId])
}

enum ImageOrientation {
  Portrait
  Landscape
  Square
}

model Variant {
  id               String           @id @default(cuid())
  price            Float
  tags             String
  imageUrl         String
  imageSignature   String
  imageOrientation ImageOrientation

  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@index([productId])
}

// ----------------------- Sales

model Orders {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
}
